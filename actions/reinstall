#!/usr/bin/env python3

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################################
# Bigtop reinstall template
#
# This provides the ability for Bigtop charms to reinstall their payload when
# a new bigtop_version is configured. This should be modified as needed for
# individual charms (see layer-spark for an example). Specifically, you should
# determine what outcome is considered "succesful" and what warrants a
# "failure", and set the action outcome/output as appropriate.
################################################################################
import sys
sys.path.append('lib')

from charmhelpers.core import hookenv, unitdata
from charms.layer.apache_bigtop_base import Bigtop
from charms.reactive import is_state


def fail(msg):
    hookenv.action_set({'outcome': 'failure'})
    hookenv.action_fail(msg)
    sys.exit()


if not is_state('bigtop.version.changed'):
    fail('No Bigtop version changes were found; nothing to reinstall.')

# NB: CHANGE THE FOLLOWING UNITDATA KEY
# Each charm ready for a reinstall should render a new site.yaml and set
# kv data to signal that a new version is ready to be installed. Change
# '<CHARM>.version.repo' to the key set by your charm.
if not unitdata.kv().get('<CHARM>.version.repo', False):
    fail('Charm is not prepared to run the reinstall action.')

bigtop = Bigtop()
result = bigtop.reinstall_repo_packages()

if result == 'success':
    hookenv.status_set('active', 'reinstall was successful')
    hookenv.action_set({'outcome': 'success'})
else:
    fail('Reinstall failed; hiera data and package repos have been restored '
         'to the previous working state.')
